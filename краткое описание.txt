 Автор - Дима Горин.
  Данная библиотека ориентирована на простую игру с открытым миром, вид сверху или сбоку, содержит самые базовые вещи для начала. Я старался максимально всё упростить и сократить количество нужного для использования кода, по этому возможности скрипта довольно ограничены. Поддержки старых браузеров нет.
  Примечание - я не считаю себя профессионалом, поэтому не гарантирую отсутствие багов, и вобще что кому-то понравится. Это просто мой набор велосипедов который мне кажется удобным.
  Игра представлена двумя видами обьектов - сущность и тайл. Сущности могут иметь любую позицию и размер. Тайлы могут распологаться на целочисленых координатах и имеют фиксированный размер 1×1, из них как из кирпичей строится местность. Локация похожа на поле для морского боя.
  Важно: некоторые функции могут не работать локально из-за защиты браузера. Чтение карты с картинки выдает security error, текстовые файлы и звуки опознаются как недоступные, чтение кук выдает некорректные результаты. Это зависит от браузера и его настроек, но все же лучше тестировать на сервере (локальном или реальном).
  
  Возможности:
 -Удобный загрузчик ресурсов для картинок, звуков, текстовых файлов;
 - Отрисовка мира с зумом и вращением камеры;
 -Проигрывание звуков (в т.ч. несколько одновременно) отдельно и с зависимостью от положения камеры;
 -Определение факта столкновения сущности с сущностью или сущности с тайлом;
 -Считывание локации с картинки;
 -Мини карта;
 -Поиск пути на локации;
 -Небольшие обертки для клавиатуры и касаний;
 -Полноэкранный режим;
 -Чтение и запись куков;
 -Кривой редактор над которым я особо не заморачивался, но лучше чем ничего.
 
  В качестве начальной разметки для сцены не потребуется ничего, даже канваса. Скрипт автоматически создает его под всем содержимым body.
  Обьект U2D уже обьявлен глобально.
  Для работоспособности редактора нужно подключить его последним, после скрипта движка и после основного скрипта игры, где обьявлены тайлы.

  
        Функции U2D
        
        
U2D.setResolution(пиксели)
- Устанавливает разрешение рендеринга. По умолчанию 400.

U2D.setFps(фпс)
- Устанавливает количество кадров в секунду. По умолчанию 60. Коллбеки сущностей все равно будут вызываться 60 раз в секунду.
        
U2D.setTile(x,y,тайл) 
- установает тайл в указанном месте.

U2D.getTile(x,y) 
- возвращает тайл в указанном месте.

U2D.getLocationWidth()
- Возвращает ширину локации

U2D.getLocationHeight()
- Возвращает высоту локации

U2D.setCloneMode(true)
- Устанавливает режим клонирования тайлов. По умолчанию false, и если один тайл изменить то изменятся и  другие. А с включенной опцией каждый будет самостоятельным.

U2D.inputSource(путь,имя)(путь,имя) 
- загрузка ресурсов для игры. Имя - краткое обозначение на свой вкус, используется в дальнейших функциях для указания ресурса. Ставит на паузу цикл рендеринга, и выводит прогрессбар. Длинна вызовов не ограничена - inputSource()()()()()... 

U2D.getSource(имя) 
- возвращает загруженный ресурс. Если это картинка то элемент img, если файл то строку с текстом.

U2D.addOnLoad(функция) 
- добавляет коллбек на окончание загрузки ресурсов. Имеющиеся не заменяются. 

U2D.setSpritesheet(имяРесурса)({
widthSteps:6,
heightSteps:6,
cadresAmount:34,
playMultipler:1,
})
- указывает что картинка является текстурным атласом и задает параметры анимации. 
widthSteps - количество кадров по ширине изображения. 
heightSteps - количество кадров по высоте изображения. 
cadresAmount - общее количество кадров, если нужны все то можно не указывать. 
playMultipler - повторение кадров, целочисленное -  если например указать 2 то анимация будет в 2 раза медленнее.

U2D.locationFromImage(имяРесурса) 
- создает локацию из картинки. Для этого у тайлов должен иметься параметр colorId.


U2D.setBackgroundTile(тайл)
- Устанавливает тайл который автоматически будет подставляться в пустые места и за пределами карты. По умолчанию для этого уже имеется черный квадрат.

U2D.forEachTile(function(t,x,y){ })
- Выполняет заданную функцию для каждого тайла на локации. В функцию передаются аргументы: t - тайл, x y - координаты. Область будет от нулевых координат до крайних поставленных тайлов, если в ней есть автоматически поставленные бэкграундные тайлы то они так же попадут в перебор.

U2D.resetLocation()
- Удаляет все тайлы с локации.

U2D.resetEntityes()
- Удаляет все сущности с локации.

U2D.distance(x1,y1,x2,y2) -
- Возвращает дистанцию между двумя точками.

U2D.angleToPoint(x1,x2,y1,y2)
- Возвращает угол от одной точки к другой в градусах.

U2D.waySearch()
.start(x,y)
.end(x,y)
.whiteList([тайлы])
.search();
- Возвращает массив путь от одной точки до другой. Это массив содержащий обьекты со значениями X и Y. 
start() - начальная точка.
end() - конечная точка.
whiteList() - массив тайлов по которым можно пройти. Можно использовать вместо нее blackList.
search() - просто нужно для инициализации поиска, когда параметры заданы.


U2D.setMiniMap({
zoom:5,
rotating:true,
marginLeft:50,
marginTop:0,
size:20,
resolution:400
});
- Указывает параметры мини карты и начиет ее отображение. Карта может быть только круглой, потому что морочаться с квадратом мне западло.
Чтобы увидеть что-то кроме черного, тайлам нужно назначить miniMapColor, а сущностям miniMapIcon.
zoom - масштаб, эквивалентен масштабу камеры. 
rotating - вращается ли карта вместе с камерой.
marginLeft - отступ от левого края экрана в процентах.
marginTop - отступ от верхнего края экрана в процентах.
size - размер в процентах (от высоты экрана).
resolution - разрешение рендеринга в пикселях. По умолчанию 200.

U2D.removeMiniMap() 
- Прекращает отображение мини карты.

U2D.pause(булевоеЗначение)
- Ставит/снимает паузу игрового процесса. Если значение не указано значение то текущее заменяется на противоположное.

U2D.setCameraPosition(x,y)
- устанавливает позицию камеры.

U2D.translateCamera(x,y)
- Сдвигает камеру на указаные значения.

U2D.setCameraAngle(угол)
- Устанавливает угол камеры в градусах.

U2D.setCameraZoom(зум)
- устанавливает масштаб камеры. Чем больше указано тем она выше. Хороший ориентир - какое значение столько тайлов влезает в экран по ширине.

U2D.getCameraX()
- возвращает x камеры.

U2D.getCameraY()
- возвращает y камеры.

U2D.ajax(путь,коллбекУспеха,коллбекОшибки)
- Совершает запрос на сервер. В коллбек успеха первым аргументом передается ответ. Лютый костыль, лучше сделать свой.

U2D.isMobile()
- Возвращает является ли браузер мобильным.


U2D.setCookie(ключ,значение)
- Записывает значение в cookie. Нужно помнить про ограничение их размера, подойдет для запоминания небольших данных - рекорда или настроек. Ключ должен быть строкой.

U2D.getCookie(ключ)
- Читает значение из cookie по ключу. Возвращает строку, поэтому если сохранялось число - для получения его надо будет еще конвертировать через parseInt().

U2D.setFullscreen()
- Разрешает игре переходить в полноэкранный режим после любого действия пользователя (клик, свайп, нажатие клавиши).

U2D.setCameraDraggable(левыйЛимитX,правыйЛимитX,верхнийЛимитY,нижнийЛимитY)
- Разрешает перемещать камеру свайпами на мобильных устройствах, ее центр будет в пределах указанных координат. Если один из лимитов не нужен можно указать null. Если аргументов нет, перемещение полностью свободное.

U2D.setPitchZooming(минимум,максимум)
- Разрешает менять зум щипком на мобильных устройствах, в пределах указаных значений. Примечание: щипок не всегда работает корректно, исправить я пока не знаю как.

U2D.startRendering(коллбэк)
-  Запускает игровой цикл. Функция-коллбэк, если она есть, будет вызываться перед каждым кадром

U2D.setOnCollide(типА,типБ)(function(a,b){ })
- Создает коллбек на столкновение двух обьектов. Для этого нужные сущности или тайлы должны иметь collideType. В функцию передатутся задействованные обьекты, в том же порядке в каком указаны типы.


     Коструктор сущности


var e=new U2D.Entity() 
- конструктор.

е.setTexture(картинка)
- Устанавливает текстуру. Если указанному изображению были заданы параметры текстурного атласа, то начинает проигрываться анимация. Заменяет цвет.

e.setColor(цвет)
- Устанавливает css цвет*. Заменяет текстуру.

e.setDrawPriority(число)
- Устанавливает приоритет рисования по отношению к другим сущностям и тайлам. По умолчанию 1.

e.setAngle(число)
- Устанавливает угол поворота в градусах.

e.setCollideType(тип)
- Устанавливает тип столкновения, который будет использоваться в U2D.addOnCollide.

e.setPosition(x,y)
- Перемещает на заданные координаты.

e.translatePosition(x,y)
- Сдвигает координаты на указаные значения.

e.polaricTranslate(угол,число)
- Сдвигает по углу на значение.

e.show()
- Добавляет сущность на локацию.

e.hide()
- Убирает сущность с локации.

e.setSize(ширина,высота)
- Задает размер.

e.bindCamera(смещение x,смещение y)
-Передвигает камеру к сущности.

e.clone()
- Возвращает копию сущности.

e.setAction(function(e){ })
- Задает функцию которая будет выполняться для сущности 60 раз в секунду. К сущности можно обратиться через this или через первый аргумент функции.

e.setMiniMapIcon(картинка,прилипание)
- Создает иконку на мини карте для сущности. Прилипание - булевое значение, по умолчанию false, отвечает за то чтобы иконка не могла пропасть с карты и всегда виднелась с краю.

e.setRemoveDelay(время)
- Устанавливает задержку в секундах, спустя которую сущность удалится с локации.

e.removeMiniMapIcon()
- Удаляет иконку на мини карте.

e.getX()
- Возвращает x.

e.getY()
- Возвращает y.

e.getAngle()
- Возвращает угол в градусах.


     Конструктор тайла
     

var t=new U2D.Tile() 
- конструктор.

t.setTexture(картинка)
- Устанавливает текстуру. Если указанному изображению были заданы параметры текстурного атласа, то начинает проигрываться анимация. Заменяет цвет.

t.setColor(цвет)
- Устанавливает css цвет*. Заменяет текстуру.

t.setDrawPriority(число)
- Устанавливает приоритет рисования по отношению к сущностям. По умолчанию 0.

t.setAngle(число)
- Устанавливает угол поворота в градусах. Рекомендуемые значения: 0,90,180,270. Вобще можно вращать на любой угол но ничего полезного это не даст.

t.setCollideType(тип)
- Устанавливает тип столкновения, который будет использоваться в U2D.addOnCollide.

t.setMiniMapColor(r,g,b)
- Устанавливает цвет которым тайл отображается на мини карте, в формате rgb.

t.setColorId(r,g,b)
- Устанавливает цвет тайла при чтении локации с картинки, какому пикселю он соответствует, в формате rgb.

t.clone()
- Возвращает копию тайла.

t.setEditorName(name)
- Задает имя которое будет отображаться в редакторе если он подключен.


      Конструктор звука


var s=new U2D.Sound(ресурс)
- Конструктор

s.start()
- начинает воспроизведение.

s.stop()
- прекращает воспроизведение.

s.setVolume(громкость)
- Устанавливает громкость звука в процентах.

s.addEndCallback(функция)
- Добавляет коллбек на окончание воспроизведения. Имеющиеся не заменяются.

s.playOnEntity(сущность,дальность)
- Звук будет играть на позиции сущности. Если камера удаляется по горизонтали то звук становится тише, за максимальную дистанцию слышимости отвечает второй аргумент.


       Обертка клавиатуры
       
var k=new U2D.Key(клавиша*)
- Конструктор.

k.setOnPress(функция)
- Устанавливает что происходит при нажатии.

k.setOnRelease(функция)
- Устанавливает что происходит при отпускании.


      Обертка касаний
      

var t=new U2D.Touch(DOMэлемент)
- Конструктор.

t.setOnStart(function(x,y){ })
- Задает коллбек на касание пальца. В функцию передаются координаты.

t.setOnMove(function(x,y){ })
- Задает коллбек на движение пальца. В функцию передаются координаты.

t.setOnEnd(function(x,y){ })
- Задает коллбек на отпускание пальца. В функцию передаются координаты.
 




 *Под css цветом я имею ввиду строки вида: 
 "red", "rgb(0,0,0)", "#eeffee"
 
 *Примеры обозначения клавиш:
"KeyA","KeyB","KeyC" - буквы;
"Digit1","Digit2","Digit3" - num'ы;
"Space" - пробел;
"ArrowLeft","ArrowUp" - стрелки.
 

